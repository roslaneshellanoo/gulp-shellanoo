// ----------------
// Grid Framework
// ----------------

@mixin container($gutter: $grid-gutter, $width: $grid-container) {
	$max-width: 100%;

	@if (type-of($gutter) == map) {
		$max-width: $width - nth(map-values($gutter), length($gutter));
	} @else {
		$max-width: $width - $gutter;
	}

	@include clearfix;
	@include make-gutters($gutter);
	margin-left: auto;
	margin-right: auto;
	max-width: $max-width;
	max-width: to-rem($max-width);
}

@mixin row($gutter: $grid-gutter) {
	@include clearfix;
	@include make-gutters($gutter, outer);

	@if $grid-flexbox {
		/* autoprefixer: off */
		display: -webkit-flex;
		display: -ms-flexbox;
		display: flex;
		-webkit-flex-wrap: wrap;
		-ms-flex-wrap: wrap;
		flex-wrap: wrap;

		&:before,
		&:after {
			/* autoprefixer: off */
			-webkit-flex-basis: 0;
			flex-basis: 0;
			-webkit-order: 1;
			order: 1;
		}
	}
}

@mixin column-base($gutter: $grid-gutter) {
	@include make-gutters($gutter);
	position: relative;
	float: left;
	width: 100%;
	min-height: 1px;
}

@mixin column($size: expand, $columns: $grid-columns) {
	@if (type-of($size) == number) {
		width: percentage($size / $columns);
	} @else {
		width: auto;
		max-width: 100%;

		@if $grid-flexbox {
			/* autoprefixer: off */

			@if $size == shrink {
				-webkit-flex: 0 0 auto;
				-ms-flex: 0 0 auto;
				flex: 0 0 auto;
			}

			@if $size == expand {
				-webkit-flex: 1 1 auto;
				-ms-flex: 1 1 auto;
				flex: 1 1 auto;
			}
		}
	}
}

@mixin column-block($columns: $grid-columns) {
	width: percentage(1 / $columns);

	&:nth-of-type(1n) {
		clear: none;
	}

	&:nth-child(#{$columns}n+1) {
		clear: both;
	}
}

@mixin column-push($size, $columns: $grid-columns) {
	@if $size > 0 {
		left: percentage($size / $columns);
	} @else {
		left: auto;
	}
}

@mixin column-pull($size, $columns: $grid-columns) {
	@if $size > 0 {
		right: percentage($size / $columns);
	} @else {
		right: auto;
	}
}

@mixin column-offset($size, $columns: $grid-columns) {
	margin-left: percentage($size / $columns);
}

@mixin calc-column($class, $index, $type) {
	@if ($type == width) and ($index > 0) {
		.col-#{$class}-#{$index} {
			width: percentage($index / $grid-columns);
		}
	}

	@if ($type == push) and ($index > 0) {
		.col-#{$class}-push-#{$index} {
			left: percentage($index / $grid-columns);
		}
	}

	@if ($type == push) and ($index == 0) {
		.col-#{$class}-push-0 {
			left: auto;
		}
	}

	@if ($type == pull) and ($index > 0) {
		.col-#{$class}-pull-#{$index} {
			right: percentage($index / $grid-columns);
		}
	}

	@if ($type == pull) and ($index == 0) {
		.col-#{$class}-pull-0 {
			right: auto;
		}
	}

	@if ($type == offset) {
		.col-#{$class}-offset-#{$index} {
			margin-left: percentage($index / $grid-columns);
		}
	}
}

// Create columns for a specific class
@mixin calc-all-columns($class) {
	@for $i from 0 through $grid-columns {
		@include calc-column($class, $i, width);
		@include calc-column($class, $i, pull);
		@include calc-column($class, $i, push);

		@if ($i < $grid-columns) {
			@include calc-column($class, $i, offset);
		}
	}
}

@mixin gutter($gutter, $type) {
	$gutter: $gutter / 2;

	@if $type == inner {
		padding-left: $gutter;
		padding-right: $gutter;

		@if strip-unit($gutter) != 0 {
			padding-left: to-rem($gutter);
			padding-right: to-rem($gutter);
		}
	} @else {
		$gutter: $gutter * -1;

		margin-left: $gutter;
		margin-right: $gutter;

		@if strip-unit($gutter) != 0 {
			margin-left: to-rem($gutter);
			margin-right: to-rem($gutter);
		}
	}
}

@mixin make-gutters($gutter: $grid-gutter, $type: inner) {
	@if (type-of($gutter) == map) {
		@each $breakpoint, $width in $gutter {
			@if $breakpoint == nth($mq-breakpoints-list, 1) {
				@include gutter($width, $type);
			} @else {
				@include mq($breakpoint) {
					@include gutter($width, $type);
				}
			}
		}
	} @else {
		@include gutter($gutter, $type);
	}
}

// Create breakpoints and responsive visibility classes
@mixin make-breakpoints {
	$i: 1;

	@each $class, $width in $mq-breakpoints {
		$i: $i + 1;

		@if length($mq-breakpoints-list) > 1 {
			.visible-#{$class} {
				display: none !important;
			}
		}

		@if $class == nth($mq-breakpoints-list, 1) {
			// first breakpoint
			@include calc-all-columns($class);

			@if length($mq-breakpoints-list) > 1 {
				@include mq($until: nth($mq-breakpoints-list, $i)) {
					.hidden-#{$class} {
						display: none !important;
					}

					.visible-#{$class} {
						display: block !important;
					}
				}
			}
		} @else if $class == nth($mq-breakpoints-list, length($mq-breakpoints-list)) {
			// last breakpoint
			@include mq($class) {
				@include calc-all-columns($class);

				.hidden-#{$class} {
					display: none !important;
				}

				.visible-#{$class} {
					display: block !important;
				}
			}
		} @else {
			.visible-#{$class}-up {
				display: none !important;
			}

			@include mq($class, nth($mq-breakpoints-list, $i)) {
				.hidden-#{$class} {
					display: none !important;
				}

				.visible-#{$class} {
					display: block !important;
				}
			}

			@include mq($class) {
				@include calc-all-columns($class);

				.hidden-#{$class}-up {
					display: none !important;
				}

				.visible-#{$class}-up {
					display: block !important;
				}
			}
		}
	}
}
